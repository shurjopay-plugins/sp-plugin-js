/**
 * 
 * Plug-in service to provide shurjoPay gateway services.
 * 
 * @uthor: Saiful Islam Shanto
 * @since 2022-11-02
 */

/* shurjopay_config.js is expected at root of application using this plugin. check README.md */
import { shurjopay_config } from '../../shurjopay_config.js';

/* Getting credentials from shurjopay_config.js file */
const sp_endpoint = shurjopay_config.SP_ENDPOINT;
const sp_username = shurjopay_config.SP_USERNAME;
const sp_password = shurjopay_config.SP_PASSWORD;
const sp_prefix = shurjopay_config.SP_PREFIX;
const sp_return_url = shurjopay_config.SP_RETURN_URL;

/* shurpay messages */
const MSG_AUTH_FAILED = 'Merchant authentication failure';
const MSG_PAYMENT_FAILED = 'Payment processing failed';
const MSG_PAYMENT_VERIFY_FAILED = 'Payment verification failed';

/**
 * Return authentication token for shurjoPay payment gateway system.
 * Setup shurjopay.properties file.
 *
 * @return authentication details with valid token
 * @throws ShurjopayException while merchant username and password is invalid.
 */
async function authentication() {
  // Fetch payment URL from authenticate API
  const response = await fetch(`${sp_endpoint}/api/get_token`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    // Request body credentials
    body: JSON.stringify({
      username: sp_username,
      password: sp_password,
    }),
  });

  return response.ok ? await response.json() : MSG_AUTH_FAILED;
}

/**
 * Send payment processing request to shurjopay system.
 *
 * @param merchant_order_id Unique ID generated by merchant system
 * @param form_data Payment request object
 * @return Payment response object contains redirect URL to reach payment page,token_details,order_id, form_data to verify order in shurjoPay.
 * @see shurjoPay v2 integration documentation for details.
 */
async function makePayment(merchant_order_id, form_data) {
  // Getting IP from user device
  const ipResponse = await fetch("https://checkip.amazonaws.com/");
  const client_ip = await ipResponse.text();

  // Call authentication function to get token details with store ID
  const token_details = await authentication();
  const { token, token_type, store_id } = token_details;

  const payLoad = {
    prefix: sp_prefix,
    store_id: store_id,
    token: token,
    return_url: sp_return_url,
    cancel_url: sp_return_url,
    order_id: merchant_order_id,
    client_ip: client_ip,
    ...form_data
  }

  // Validate amount
  if (form_data.amount <= 0)
    return "Amount cannot be less then or equal to 0";

  // Fetch payment URL from makePayment API
  const response = await fetch(`${sp_endpoint}/api/secret-pay`, {
    method: "POST",
    headers: headerWithToken(token, token_type),
    body: JSON.stringify(payLoad),
  });

  return response.ok ? await response.json() : MSG_PAYMENT_FAILED;
}

/**
 * Verify payment status using shurjopay order id.
 * Payment details object is returned when order status is success in shurjopay system.
 *
 * @param sp_order_id shurjopay order id
 * @return Payment details object if order verified successfully
 */
async function verifyPayment(sp_order_id) {
  if (!sp_order_id) return "Missing order id";

  const token_details = await authentication();
  const { token, token_type } = token_details;

  const response = await fetch(`${sp_endpoint}/api/verification`, {
    method: "POST",
    headers: headerWithToken(token, token_type),
    body: JSON.stringify({
      order_id: sp_order_id,
    }),
  });

  return response.ok ? await response.json : MSG_PAYMENT_VERIFY_FAILED;
}

function headerWithToken(token, token_type) {
  return {
    authorization: `${token_type} ${token}`,
    Accept: "application/json",
    "Content-Type": "application/json",
  }
}

/* Export functions */
export { makePayment, verifyPayment };
